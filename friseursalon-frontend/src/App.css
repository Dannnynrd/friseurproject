/* friseursalon-frontend/src/App.css */

/* --- GRUNDEINSTELLUNGEN & GLOBALE CSS-VARIABLEN --- */
:root {
  /* Farbpalette bleibt global verfügbar */
  --light-bg: #ffffff;
  --dark-text: #1f1f1f; /* Wird in tailwind.config.js als 'dark-text' gemappt */
  --medium-grey-text: #5f5f5f; /* Wird in tailwind.config.js als 'medium-grey-text' gemappt */
  --light-grey-text: #8c8c8c; /* Wird in tailwind.config.js als 'light-grey-text' gemappt */
  --border-color: #e7e7e7; /* Wird in tailwind.config.js als 'border-color' gemappt */
  --border-color-light: #eeeeee; /* Für hellere Trennlinien, ggf. auch in Tailwind mappen */
  --border-color-extralight: #f5f5f5; /* Für sehr subtile Trennlinien */
  --border-color-medium: #d1d5db; /* Tailwind gray-300, für konsistente Ränder */
  --light-grey-bg: #f8f8f8; /* Wird in tailwind.config.js als 'light-grey-bg' gemappt */
  --dark-bg-contrast: #1a1a1a;
  --light-text-on-dark: #f5f5f5;

  /* Statusfarben - diese sind gut als globale Variablen */
  --danger-color: #c82333; /* Dunkles Rot für Fehlertexte/Icons */
  --danger-color-dark: #b91c1c; /* Noch dunkler für Hover-Effekte etc. */
  --danger-bg: #f8d7da; /* Heller Hintergrund für Fehlerboxen (Bootstrap-ähnlich) */
  --danger-bg-light: #fef2f2; /* Sehr heller Hintergrund für Hover-Effekte */

  --success-color: #28a745; /* Dunkles Grün */
  --success-color-dark: #1c7430; /* Noch dunkler */
  --success-bg: #d4edda; /* Heller Hintergrund */
  --success-bg-light: #e2f0e6; /* Sehr heller Hintergrund */

  --info-color: #004085; /* Dunkles Blau */
  --info-color-dark: #002752;
  --info-bg: #cce5ff; /* Heller Hintergrund */
  --info-bg-light: #e7f3ff; /* Sehr heller Hintergrund */

  --warning-color: #ffc107; /* Gelb/Orange für Warnungen */
  --warning-color-dark: #d39e00;
  --warning-bg: #fff3cd; /* Heller Hintergrund */
  --warning-bg-light: #fff9e6;

  /* UI-Element Farben */
  --disabled-bg: #e9ecef;
  --disabled-text: #adb5bd;
  --disabled-border: #ced4da;
  --focus-ring-color: #007bff; /* Blau für Fokus-Ringe */
  --focus-ring-subtle-color: rgba(0, 123, 255, 0.25); /* Transparenter Fokus-Ring */

  /* Schriftarten - diese werden auch in tailwind.config.js definiert */
  --font-serif: 'Merriweather', serif;
  --font-sans: 'Manrope', sans-serif;
  --transition-ease: ease-in-out; /* Für konsistente Animationen */

  /* Layout-Variablen */
  --header-height-desktop: 5rem;
  --header-height-mobile: 4.5rem;
  --footer-height: auto; /* Footer-Höhe kann variieren, ggf. anpassen wenn fixe Höhe benötigt */
}

/*
  Die folgenden Stile sind Kandidaten für eine Verlagerung in CSS-Module
  oder für einen Ersatz durch Tailwind-Klassen.
  Fürs Erste kommentieren wir sie hier aus oder löschen sie,
  um zu sehen, was Tailwind bereits abdeckt oder wo Lücken entstehen.
*/

/*
  ENTFERNT oder stark REDUZIERT, da vieles durch Tailwind oder spezifische Module abgedeckt wird/werden sollte:

  .appointment-edit-modal-content .modal-actions { ... }
  .custom-recharts-tooltip { ... }
  .appointment-edit-modal-content .modal-actions-right { ... }
  .appointment-edit-modal-content .button-link-outline.danger { ... }
  .appointment-edit-modal-content .form-input-disabled { ... }
*/

/* --- CSS Reset & Basis-Stile (bleiben global) --- */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
  font-size: 16px; /* Basis-Schriftgröße für REM-Berechnungen */
}

body {
  /* Schriftart, Hintergrund, Textfarbe etc. werden primär durch Tailwind base oder index.css gesetzt */
  line-height: 1.7; /* Grundlegende Zeilenhöhe */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  /* overflow-x: hidden; wird in index.css gesetzt */
}

/* Verhindert Scrollen, wenn mobile Menüs aktiv sind */
body.mobile-menu-active, html.mobile-menu-active,
body.mobile-dashboard-nav-open, html.mobile-dashboard-nav-open {
  overflow: hidden;
}

::selection {
  background-color: var(--dark-text);
  color: var(--light-bg);
}

/* --- LAYOUT & HELPER (Einige globale Helfer können bleiben) --- */
.container {
  /* Tailwind's 'container' Klasse wird bevorzugt.
     Wenn diese Klasse hier noch spezifische, nicht durch Tailwind abdeckbare
     Eigenschaften hat, können diese bleiben. Ansonsten entfernen.
     Beispiel: max-width und mx-auto kommen von Tailwind.
     padding: 0 1.5rem; wird oft auch von Tailwind gesetzt (px-6).
  */
  /* max-width: 1280px; */ /* Wird von Tailwind's container oder manuell gesetzt */
  /* margin: 0 auto; */   /* Wird von Tailwind's mx-auto gesetzt */
  /* padding: 0 1.5rem; */ /* Wird von Tailwind's px-6 gesetzt */
}

main {
  display: block; /* Standard für main, kann bleiben */
  position: relative; /* Kann nützlich sein, bleibt vorerst */
  z-index: 1;
}

section {
  /* padding: 4rem 0; */ /* Besser Tailwind Klassen wie py-16 oder py-20 verwenden */
  position: relative; /* Kann nützlich sein */
  z-index: 0;
}
/* @media (max-width: 768px) { section { padding: 2.5rem 0; } } */ /* Responsive Paddings mit Tailwind: sm:py-10 etc. */

.section-header {
  /* text-align: center; max-width: 600px; margin: 0 auto 2.5rem auto; */
  /* Diese Stile sind sehr spezifisch und sollten entweder in ein
     eigenes CSS-Modul für eine <SectionHeader>-Komponente oder
     direkt mit Tailwind-Klassen in den Komponenten gesetzt werden, die es nutzen.
     Beispiel: text-center max-w-xl mx-auto mb-10
  */
}
/*
.section-header h2 { ... }
.section-header .subtitle { ... }
*/

/* ==========================================================================
   Interaktive Elemente: Basisstile und Fokusmanagement (GLOBAL)
   Diese sind wichtig für Accessibility und können global bleiben,
   sollten aber mit Tailwind's Fokus-Utilities harmonieren.
   ========================================================================== */

a, button, input, textarea, select, summary, [tabindex]:not([tabindex*="-"]) {
  outline: none; /* Tailwind's focus-visible Utilities sind besser */
  -webkit-tap-highlight-color: transparent; /* Verhindert blauen Kasten auf Mobile bei Tap */
}

/*
  Fokus-Stile: Tailwind bietet `focus:ring`, `focus-visible:ring` etc.
  Diese sollten bevorzugt werden. Die globalen :focus-visible Stile hier
  können als Fallback dienen oder für Elemente, die nicht direkt mit Tailwind gestylt werden.
*/
.button-link:focus-visible,
.nav-cta:focus-visible,
.auth-button:focus-visible,
.form-group input:focus-visible,
.form-group textarea:focus-visible,
.form-group select:focus-visible,
.react-datepicker-wrapper input:focus-visible,
.mobile-menu-toggle:focus-visible
{
  /* Beispiel: Tailwind würde hier `focus:ring-2 focus:ring-offset-2 focus:ring-blue-500` verwenden.
     Wenn diese globalen Stile beibehalten werden, sicherstellen, dass sie nicht mit Tailwind kollidieren.
     Es ist oft besser, Fokus-Styling direkt mit Tailwind zu machen.
  */
  /* outline: 2px solid var(--focus-ring-color) !important; */
  /* outline-offset: 2px !important; */
  /* box-shadow: 0 0 0 2px var(--light-bg), 0 0 0 4px var(--focus-ring-color) !important; */
}

.nav-link-item:focus-visible,
.footer a.interactive:focus-visible,
.faq-item summary.interactive:focus-visible,
.product-card a.interactive:focus-visible,
.login-prompt-booking a:not(.button-link):focus-visible,
.logo:focus-visible {
  /* outline: 2px solid var(--focus-ring-subtle-color); */
  /* outline-offset: 1px; */
  /* background-color: var(--light-grey-bg); */ /* Kann zu unerwünschten Effekten führen */
  /* border-radius: 3px; */
}


/* ==========================================================================
   Globale Buttons & Button-ähnliche Links
   Diese sollten stark reduziert und durch Tailwind-Komponenten/@apply oder
   direkte Tailwind-Klassen ersetzt werden.
   ========================================================================== */
.button-link, .nav-cta /* , .auth-button (hat eigene CSS) */
{
  /*
    display: inline-flex; align-items: center; justify-content: center;
    background-color: var(--dark-text); color: var(--light-bg);
    padding: 0.7rem 1.5rem; border-radius: 4px; text-decoration: none;
    font-weight: 500; font-size: 0.9rem; border: 1px solid var(--dark-text);
    transition: background-color 0.2s var(--transition-ease), border-color 0.2s var(--transition-ease), color 0.2s var(--transition-ease), transform 0.1s ease-out, box-shadow 0.2s ease;
    text-align: center; cursor: pointer; line-height: 1.4;
  */
  /* Diese Stile sollten durch Tailwind-Klassen ersetzt werden.
     Beispiel:
     <button className="inline-flex items-center justify-center bg-dark-text text-light-bg px-6 py-3 rounded font-medium text-sm border border-dark-text hover:bg-gray-700 hover:border-gray-700 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
       Button Text
     </button>
     Oder via @apply in einer globalen Komponenten-CSS-Datei, falls Create React App genutzt wird und PostCSS konfiguriert ist.
  */
}

/* .button-link:hover:not(:disabled), .nav-cta:hover:not(:disabled) { ... } */
/* .button-link-outline { ... } */
/* .button-link-outline:hover:not(:disabled) { ... } */
/* .button-link .svg-inline--fa { ... } */
/* .button-link:active:not(:disabled) { ... } */
/* .button-link[disabled] { ... } */


/* --- PRELOADER (Kann global bleiben, da es das initiale Laden betrifft) --- */
#preloader {
  position: fixed;
  inset: 0;
  background: var(--light-bg);
  z-index: 10002; /* Sehr hoher z-index */
  display: flex;
  align-items: center;
  justify-content: center;
  transition: opacity 0.5s var(--transition-ease) 0.1s, visibility 0s 0.6s linear;
}
#preloader.loaded {
  opacity: 0;
  visibility: hidden;
  pointer-events: none;
}
.loader-char {
  font-family: var(--font-serif), serif;
  font-size: 1.6rem;
  animation: pulse 1.3s infinite ease-in-out;
  color: var(--dark-text);
}
@keyframes pulse {
  0%, 100% { opacity: 0.4; }
  50% { opacity: 1; }
}

/*
  Globale Form-spezifische Styles (Login, ServiceForm, AppointmentForm)
  Diese sind zu spezifisch für App.css. Sie sollten in die jeweiligen
  Komponenten-CSS-Module verschoben werden.
*/
/*
.auth-container, .service-form-container, .appointment-form-fields { ... }
.auth-container h2, .service-form-container h3, .appointment-form-fields .form-section-heading-compact { ... }
.auth-form, .service-form, .space-y-form { ... }
.form-group { ... }
.form-group label { ... }
.form-group input[type="text"], ... { ... }
.form-group textarea { ... }
.form-hint { ... }
.auth-button, .service-form .submit-button, .appointment-form-fields .submit-appointment-button { ... }
.auth-form .switch-button { ... }
.form-grid { ... }
*/

/*
  Globale Modal-Styling (ServiceEditModal, AppointmentEditModal, ConfirmModal)
  Basis-Modal-Overlay-Stile können global bleiben, aber der Inhalt (.modal-content)
  sollte eher komponenten-spezifisch sein oder eine Basis-Modal-Komponente nutzen.
*/
.modal-overlay {
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.6); /* Leicht dunkler für besseren Kontrast */
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1050; /* Standard z-index für Modals */
  padding: 1rem;
  animation: fadeInModalOverlay 0.2s ease-out forwards; /* Schnellere, sanftere Animation */
}
@keyframes fadeInModalOverlay {
  from { opacity: 0; }
  to { opacity: 1; }
}

.modal-content {
  background-color: var(--light-bg);
  padding: 1.5rem; /* Standard-Padding, kann von spezifischen Modals überschrieben werden */
  border-radius: 8px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.15); /* Weicherer Schatten */
  width: 100%;
  max-width: 500px; /* Standard-Maximalbreite */
  animation: slideInModalContent 0.25s ease-out forwards; /* Schnellere, sanftere Animation */
  max-height: 90vh;
  overflow-y: auto;
  position: relative; /* Für interne Positionierung von Schließen-Buttons etc. */
}
@keyframes slideInModalContent {
  from { opacity: 0; transform: translateY(-20px) scale(0.98); }
  to { opacity: 1; transform: translateY(0) scale(1); }
}

/*
.modal-content h3 { ... }
.modal-actions { ... }
.modal-actions .cancel-button { ... }
.modal-content .form-message { ... }
*/

/*
  Globale Fehlermeldungen / Benachrichtigungen
  Diese sind gut als globale Utility-Klassen, aber Tailwind bietet ähnliches
  (z.B. für Hintergründe, Textfarben, Ränder).
  Man könnte Basis-Layout-Klassen definieren und Farben mit Tailwind setzen.
*/
.form-message {
  margin-top: 1rem;
  padding: 0.8rem 1.2rem; /* Etwas mehr Padding */
  border-radius: 6px; /* Konsistenter Radius */
  font-size: 0.875rem; /* Etwas größer für bessere Lesbarkeit */
  text-align: left;
  display: flex;
  align-items: center;
  gap: 0.6rem; /* Etwas mehr Abstand zum Icon */
  border-width: 1px;
  border-style: solid;
}
.form-message .svg-inline--fa {
  font-size: 1.1em; /* Icon etwas größer im Verhältnis zum Text */
}

.form-message.error {
  color: var(--danger-color-dark); /* Dunkler für besseren Kontrast */
  background-color: var(--danger-bg-light);
  border-color: var(--danger-bg); /* Hellerer Rand, um nicht zu dominant zu sein */
}
.form-message.success {
  color: var(--success-color-dark);
  background-color: var(--success-bg-light);
  border-color: var(--success-bg);
}
.form-message.info {
  color: var(--info-color-dark);
  background-color: var(--info-bg-light);
  border-color: var(--info-bg);
}
.form-message.small { /* Beibehalten, da es nützlich sein kann */
  font-size: 0.8rem;
  padding: 0.5rem 0.8rem;
  margin-top: 0.5rem;
}


/*
  Animationsklassen .animate-up und .visible
  Diese sind für Scroll-Animationen und können global bleiben,
  da sie von mehreren Sektionen verwendet werden.
*/
.animate-up {
  opacity: 0;
  transform: translateY(30px);
  transition: opacity 0.6s var(--transition-ease), transform 0.6s var(--transition-ease);
}
/*
  Die .visible Klasse wird durch JavaScript hinzugefügt, wenn das Element in den Viewport kommt.
  Es ist wichtig, dass die Transition auf .animate-up definiert ist, damit sie beim Hinzufügen
  von .visible ausgelöst wird.
*/
.animate-up.visible {
  opacity: 1;
  transform: translateY(0);
}
/*
  Wenn eine Sektion selbst die Klasse .visible bekommt (wie in deinem Code),
  und die Kinder .animate-up haben, funktioniert das gut.
*/
section.visible .animate-up {
  opacity: 1;
  transform: translateY(0);
}


/*
  Stile für spezifische Sektionen wie #trust-bar, .experience-grid, #testimonials,
  #about-founder, #services-dynamic, .gallery-grid, #essentials, .faq-container,
  #location, #newsletter, .footer-grid etc. sollten in die CSS-Module der
  jeweiligen Komponenten verschoben werden.
*/

/*
  Beispiel: .account-dashboard-container und seine Unterstile gehören
  zu AccountDashboard.module.css.
  .dashboard-main-heading, .dashboard-sidebar etc.
*/

/*
  Globale Tabellenstile (.app-table) können als Basis in App.css bleiben,
  aber spezifische Anpassungen für Listen (AppointmentList, ServiceList)
  sollten in deren Modulen erfolgen oder durch Tailwind-Klassen überschrieben werden.
*/
.app-table {
  width: 100%;
  border-collapse: collapse; /* Standard für Tabellen */
  margin-top: 1rem; /* Kann durch Tailwind (z.B. mt-4) ersetzt werden */
  font-size: 0.875rem; /* Tailwind: text-sm */
}
.app-table th, .app-table td {
  border: 1px solid var(--border-color); /* Tailwind: border border-border-color */
  padding: 0.75rem 1rem; /* Tailwind: px-4 py-3 */
  text-align: left;
  vertical-align: top; /* Gut für mehrzeiligen Inhalt */
}
.app-table th {
  background-color: var(--light-grey-bg); /* Tailwind: bg-light-grey-bg */
  font-weight: 600; /* Tailwind: font-semibold */
  color: var(--dark-text); /* Tailwind: text-dark-text */
}
.app-table tbody tr:hover { /* Tailwind: hover:bg-gray-50 (oder ähnliche Farbe) */
  background-color: #f9fafb; /* Beispiel, anpassen an deine Farbpalette */
}

/*
  Mobile Kartenansicht für Listen (global)
  Diese Logik sollte in die jeweilige Listenkomponente (z.B. AppointmentList.js)
  und deren CSS-Modul verschoben werden, da sie das responsive Verhalten
  dieser spezifischen Listen steuert.
*/
/*
.md\:hidden .space-y-4 > div { ... }
*/
